{"version":3,"sources":["COMPONENTS/card/C_card.jsx","COMPONENTS/card_list/C_card_list.jsx","COMPONENTS/searchBox/C_searchBox.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","serachField","target","value","state","fetch","then","r","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAGaA,G,YAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBAGP,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAC1B,4BACKL,EAAMI,QAAQE,MAEnB,2BACKN,EAAMI,QAAQG,UCRdC,EAAW,SAAAR,GAAK,OACzB,yBAAKC,UAAY,aAETD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC1B,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCL/BQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BACIb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MC2CHG,G,kBA5Cb,aACC,IAAD,8BACE,+CAwBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAvBrC,EAAKC,MACL,CACEd,SAAS,GACTW,YAAa,IANjB,E,iFAkBC,IAAD,OAEII,MAAM,8CACLC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,+BAOnC,IAAD,EAC4BC,KAAKN,MAA/Bd,EADF,EACEA,SAAUW,EADZ,EACYA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAClD,OACG,yBAAK/B,UAAU,OACb,+CACA,kBAAC,EAAD,CAAWY,YAAY,kBAAkBC,aAAce,KAAKf,eAC5D,kBAAC,EAAD,CAAUL,SAAUqB,S,GAvCXI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.41aff42e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SC_card.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        \r\n            {/* Slike su povucene sa sajta samo se menja Id i kreiral link*/}\r\n            <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n        <h2>\r\n            {props.monster.name}\r\n        </h2>\r\n        <p>\r\n            {props.monster.email}\r\n        </p>\r\n    </div>\r\n);","import React from 'react';\r\nimport './SC_card_list.css';\r\nimport {Card} from '../card/C_card';\r\n\r\nexport const CardList = props => (\r\n    <div className = \"card-list\">\r\n        {\r\n            props.monsters.map(monster =>(\r\n            <Card key={monster.id} monster={monster}/>\r\n            ))\r\n        }\r\n    </div>\r\n);","import React from 'react';\r\nimport './CS_searchBox.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input \r\n        className='search' \r\n        type='serach' \r\n        placeholder={placeholder} \r\n        onChange={handleChange}\r\n    />\r\n)\r\n\r\n","import React, { Component } from 'react';\r\nimport {CardList} from './COMPONENTS/card_list/C_card_list'\r\nimport {SearchBox} from './COMPONENTS/searchBox/C_searchBox'\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor()\r\n  {\r\n    super();\r\n    \r\n    this.state = \r\n    {\r\n      monsters:[],\r\n      serachField: ''\r\n    }\r\n  }\r\n\r\n  /* #region componentDidMount je lifeCycle metod */\r\n  //Mount ili mounting je kada react stavlja odnosno renderuje komponentu u DOM prvi put\r\n  /*\r\n    componentDidMount je Ugradjena funkcija klase Component koja se izvrsava kada se\r\n    vrsi mounting komponente u kojoj se nalazi.\r\n  */\r\n  /* #endregion */\r\n  componentDidMount()\r\n  {\r\n    //adresa sa tutorijala koja vraca neke podatke\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(r => r.json())\r\n      .then(users => this.setState({monsters: users}));        \r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({serachField: e.target.value})\r\n  }\r\n\r\n  render(){\r\n    const { monsters, serachField } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => \r\n      monster.name.toLowerCase().includes(serachField.toLowerCase()))\r\n    return (\r\n       <div className=\"App\">\r\n         <h1>Monster Rolodex</h1>\r\n         <SearchBox placeholder='search monsters' handleChange={this.handleChange}/>\r\n         <CardList monsters={filteredMonsters}></CardList>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n//   <input type='serach' placeholder='search monsters' onChange={\r\n      //       e => {\r\n      //         /* SETSTATE JE ASINHRONA METODA I AKO ZELIMO REZULTAT DA SACEKAMO DA GA VRATI \r\n      //            ONDA DALJE IZVRSAVANJE TREBA DA SE POZIVA U DRUGOM PARAMETRU FUNKCIJE. U OVOM\r\n      //            SLUCAJU JE console.log FUNKCIJA ALI NARAVNO MOZEMO PROSLEDITI I SOPSTVENU FUNKCIJU.\r\n      //            OVO JE BITNO JER AKO POSMATRAMO ZAKOMENTARISANI PRIMER ISPOD, NJEGOVO IZVRSAVANJE \r\n      //            NECE BITI OCEKIVANO, I U KONZOLI NECE SE PRIKAZATI POSLEDNJI UNESENI KARAKTER U INPPUT POLJE\r\n      //            JER SE PRVO IZVRSI console.log A TEK ONDA SE SETUJE STATE ASINHRONO. ZATO AKO JE BITAN  REDOSLED IZVRSAVANJA\r\n      //            I NEOPHODNI SU NAM PODACI KOJE VRACA SETSTATE ONDA TREBAMO UKLJUCITI I DRUGI PARAMETAR KAKO JE I REGULARNO URADJENO \r\n      //              */\r\n      //             /*\r\n      //               this.setState({serachField: e.target.value});\r\n      //               console.log(this.state);\r\n\r\n\r\n      //               this.setState({serachField: e.target.value}, () => console.log(this.state));\r\n      //             */\r\n      //         this.setState({serachField: e.target.value}, () => console.log(this.state));\r\n      //       }\r\n      //     }\r\n      //   />\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}